---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: postgres-database-operator
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRole
metadata:
  name: postgres-database-operator-role-cluster
rules:

  # Framework: knowing which other operators are running (i.e. peering).
  - apiGroups: [zalando.org]
    resources: [clusterkopfpeerings]
    verbs: [list, watch, patch, get]

  # Application: read-only access for watching cluster-wide.
  - apiGroups: [k8s.jkroepke.de]
    resources: [postgresdatabase]
    verbs: [list, watch]
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: Role
metadata:
  name: postgres-database-operator-role-namespaced
rules:

  # Framework: knowing which other operators are running (i.e. peering).
  - apiGroups: [zalando.org]
    resources: [kopfpeerings]
    verbs: [list, watch, patch, get]

  # Framework: posting the events about the handlers progress/errors.
  - apiGroups: [events.k8s.io]
    resources: [events]
    verbs: [create]

  # Application: watching & handling for the custom resource we declare.
  - apiGroups: [k8s.jkroepke.de]
    resources: [postgresdatabase]
    verbs: [list, watch, patch]

  # Application: other resources it produces and manipulates.
  # Here, we create Jobs+PVCs+Pods, but we do not patch/update/delete them ever.
  - apiGroups: [""]
    resources: [secrets]
    verbs: [create]
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRoleBinding
metadata:
  name: postgres-database-operator-rolebinding-cluster
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: postgres-database-operator-role-cluster
subjects:
  - kind: ServiceAccount
    name: postgres-database-operator
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: RoleBinding
metadata:
  name: postgres-database-operator-rolebinding-namespaced
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: postgres-database-operator-role-namespaced
subjects:
  - kind: ServiceAccount
    name: postgres-database-operator
